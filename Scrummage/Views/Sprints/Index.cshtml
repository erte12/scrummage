@using Scrummage.Core
@using Scrummage.Models
@model Scrummage.ViewModels.SprintBoardViewModel

@{
    ViewBag.Title = "Scrum Board";
    var sprintNotStartedYet = Model.StartsAt > DateTime.Today;
    var sprintIsFinished = Model.EndsAt < DateTime.Today;
    var sprintIsInactive = sprintNotStartedYet || sprintIsFinished;
}

<h2>Scrum board - @Model.Name (@Model.StartsAt.ToString("d") - @Model.EndsAt.ToString("d")) - Team: @Model.Team.Name</h2>
<hr/>
<div class="row">
    <div class="container pull-left">
        <div class="col-lg-3">
            <select id="sprintsList" class="form-control center-block">
                @foreach (var sprint in @Model.TeamSprints)
                {
                    <option @((sprint.Id == Model.Id)
                                  ? "selected"
                                  : null) value="@sprint.Id">@sprint.Name</option>
                }
            </select>
        </div>
        
        @if (User.IsInRole(RoleName.ScrumMaster))
        {
            <div class="col-lg-2">
                @Html.ActionLink("Manage sprint", "Manage", "Sprints",
                    new {id = @Model.Id},
                    new {@class = "btn btn-primary btn-block"})
            </div>
        }
        <div class="col-lg-2">
            @Html.ActionLink("Statistics", "Statistics", "Sprints",
                new { id = @Model.Id },
                new {@class = "btn btn-primary btn-block"})
        </div>
        @if (User.IsInRole(RoleName.ScrumMaster))
        {
            <div class="col-lg-2">
                @Html.ActionLink("New sprint", "New", "Sprints",
                    new {teamId = @Model.Team.Id},
                    new {@class = "btn btn-success btn-block" })
            </div>
        }
        <div class="col-lg-2">
            @Html.ActionLink("Events", "Index", "Events",
                new {teamId = @Model.Team.Id},
                new {@class = "btn btn-warning btn-block" })
        </div>
    </div>
</div>
<hr/>

@if (sprintIsInactive)
{
    <div class="row">
        <div class="col-md-offset-3 col-md-6">
            <div class="text-center alert@(sprintNotStartedYet ? " alert-info" : " alert-success")" role="alert">
                <span class="glyphicon glyphicon-alert"></span>
                @if (sprintNotStartedYet)
                {
                    <text>This sprint starts at @Model.StartsAt.ToString("d") and is not active yet.</text>
                }
                else
                {
                    <text>This sprint was completed at @Model.EndsAt.ToString("d") and is no longer active.</text>
}
            </div> 
        </div>
    </div>
}

<table id="scrumBoard" class="table table-bordered@(sprintIsInactive ? " disabled" : null)">
    <thead>
    <tr>
        <th>Who</th>
        <th>Tasks</th>
        <th>Ongoing</th>
        <th>Done</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var user in Model.Users)
    {
        <tr class="js-user-row" data-user-id="@user.Id">
            <td class="scrum-who-col">
                @user.Name @user.Surname
            </td>
            <td data-type-id="@((byte)TaskType.Awaiting)" class="scrum-task-col">

            </td>
            <td data-type-id="@((byte)TaskType.Ongoing)" class="scrum-task-col">

            </td>
            <td data-type-id="@((byte)TaskType.Done)" class="scrum-task-col">

            </td>
        </tr>
    }
    </tbody>
</table> 


@section scripts
{
    
@Scripts.Render("~/bundles/jquery-ui")
@Scripts.Render("~/bundles/handlebars")

    @* Task Box template *@
    <script id="taskBox" type="text/x-handlebars-template">
        @Html.Partial("_TaskBox")    
    </script>

    <script>
        var source = $('#taskBox').html();
        var template = Handlebars.compile(source);
        var table = $('#scrumBoard');

        $.get('/api/ScrumTasks?sprintId=' + @Model.Id + '&onlyActive=true', function (data) {
            data.forEach(function (task) {
                var taskBox = $(template(task));

                if (task.taskType === @((byte)TaskType.Done))
                    taskBox.removeClass('moveable');
                else
                    taskBox.find('.js-done').hide();

                var elementPosition = $('.js-user-row[data-user-id=' + task.user.id + ']')
                    .find('.scrum-task-col[data-type-id=' + task.taskType + ']');

                taskBox.appendTo(elementPosition);
            });
        }).done(function () {
            @if (!sprintIsInactive)
            {
                @:makeTaskBoxesDraggable();
            }

            $('.js-taskbox').on('mousedown', '.js-task-details-button', function () {
                var taskId = $(this).parents('.js-taskbox').attr('data-task-id');
                
                $.get('/api/ScrumTasks/GetScrumTaskContent?id=' + taskId, function (task) {
                    var message = task.content + '<hr />' +
                        '<div><strong>Priority: ' + task.priority + '</strong></div>' +
                        '<div><strong>Estimation: ' + task.estimation.value + '</strong></div>' +
                        '<div><strong>Who: ' + task.user.name + ' ' + task.user.surname + '</strong></div>';

                    if(task.took != null)
                        message += '<div><strong>Took: ' + task.took.value + '</strong></div>';

                    bootbox.alert({
                        size: "medium",
                        title: task.title,
                        message: message
                    });
                });
            });

            table.dataTable();
        });

        function makeTaskBoxesDraggable() {
            $('.moveable').draggable({
                revert: "invalid",
                start: function(event, ui) {
                    ui.helper.css('z-index', 1);
                    ui.helper.parents('.js-user-row')
                        .children('.scrum-task-col')
                        .droppable('enable');
                },
                stop: function(event, ui) {
                    ui.helper.parents('.js-user-row')
                        .children('.scrum-task-col')
                        .droppable('disable');
                }
            });
        }

        $('#sprintsList').on('change', function () {
            location.href = '/Sprints/' + $(this).val();
        });
        
        $('.scrum-task-col').droppable({
            classes: {
                "ui-droppable-hover": "ui-state-hover"
            },
            drop: function (event, ui) {
                var taskType = $(this).attr('data-type-id');
                var taskBox = ui.draggable;
                var scrumTaskId = taskBox.attr('data-task-id');

                if (taskType === taskBox.parents('.scrum-task-col').attr('data-type-id')) {
                    taskBox.removeAttr('style');
                    return;
                }

                if (taskType === '@((byte)@TaskType.Done)') {
                    bootbox.prompt({
                        title: "How much took this task? " +
                        "<div><strong>Note that this operation cannot be undone!</strong></div>",
                        inputType: 'select',
                        inputOptions: [
                            @foreach (var estimation in Model.Estimations)
                            {
                                @:{
                                @:    text: @estimation.Value,
                                @:    value: @estimation.Id
                                @:},
                            }
                        ],
                        callback: function (took) {
                            if (took == null) {
                                taskBox.removeAttr('style');
                                return;
                            } else
                                updateScrumTask(taskBox, scrumTaskId, taskType, took);
                        }
                    });
                } else
                    updateScrumTask(taskBox, scrumTaskId, taskType);

            }
        }).droppable('disable');

        function updateScrumTask(taskBox, scrumTaskId, taskType, took) {
            $.ajax({
                    url: '/api/scrumtasks/' + scrumTaskId,
                    method: 'patch',
                    data: { taskType: taskType, tookId: took }
                })
                .done(function(data) {
                    switch(taskType) {
                    case '@((byte)TaskType.Awaiting)':
                        moveTaskBox(taskBox, @((byte)TaskType.Awaiting));
                        break;
                    case '@((byte)TaskType.Done)':
                        moveTaskBox(taskBox, @((byte)TaskType.Done), data.took);
                        break;
                    case '@((byte)TaskType.Ongoing)':
                        moveTaskBox(taskBox, @((byte)TaskType.Ongoing));
                        break;
                    }

                    toastr.success('Task status changed successfully');
                })

                .fail(function() {
                    toastr.error('Something went wrong');
                });
        }

        function moveTaskBox(taskBox, destination, took) {
            taskBox.find('js-took').text(took);

            if (destination === @((byte)TaskType.Done)) {
                taskBox.find('.js-done').show();
                taskBox.removeClass('moveable').draggable('disable');
            }

            taskBox
                .appendTo(taskBox.parents('tr.js-user-row').find('.scrum-task-col[data-type-id="' + destination + '"]'))
                .removeAttr('style');
        }

        @if (ViewBag.SprintDeleted == true)
        {
            @:bootbox.alert('Sprint successfully deleted');
        }
    </script>
}