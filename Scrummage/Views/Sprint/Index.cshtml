@using Scrummage.Models
@model Scrummage.ViewModels.SprintBoardViewModel

@{
    ViewBag.Title = "Scrum Board";
}
@section fullWidth
{
    
<h2>Scrum board - @Model.Team.Name</h2>
<hr/>
<div class="row">
    <div class="col-md-2">
        <select id="sprintsList" class="form-control">
            <option value="0">-</option>
            @foreach (var sprint in @Model.Team.Sprints)
            {
                <option @((sprint.Id == Model.SprintId)
                              ? "selected"
                              : null) value="@sprint.Id">@sprint.Name</option>
            }
        </select>
    </div>
    <div class="col-md-2">
        @Html.ActionLink("Backlog", "Manage", "Sprint",
            new {id = @Model.SprintId},
            new {@class = "btn btn-primary btn-block"})
    </div>
    <div class="col-md-2">
        @Html.ActionLink("New sprint", "New", "Sprint",
            new {teamId = @Model.Team.Id},
            new {@class = "btn btn-primary btn-block"})
    </div>
</div>
<hr/> 
<table id="scrumBoard" class="table table-bordered table-hover">
    <thead>
    <th>Who</th>
    <th>Tasks</th>
    <th>Ongoing</th>
    <th>Done</th>
    </thead>
    <tbody>
    @foreach (var user in Model.Users)
    {
        <tr class="js-user-row">
            <td class="scrum-who-col">
                @user.Name @user.Surname
            </td>
            <td class="scrum-task-col js-@TaskType.Awaiting">
                @foreach (var task in user.ScrumTasks.Where(s => s.TaskType == TaskType.Awaiting))
                {
                    @Html.Partial("_TaskBox", task);
                }
            </td>
            <td class="scrum-task-col js-@TaskType.Ongoing">
                @foreach (var task in user.ScrumTasks.Where(s => s.TaskType == TaskType.Ongoing))
                {
                    @Html.Partial("_TaskBox", task);                      
                }
            </td>
            <td class="scrum-task-col js-@TaskType.Done">
                @foreach (var task in user.ScrumTasks.Where(s => s.TaskType == TaskType.Done))
                {
                    @Html.Partial("_TaskBox", task);                      
                }
            </td>
        </tr>
    }
            
    </tbody>
</table> 
}

@section scripts
{
    @Scripts.Render("~/bundles/lib")
    <script>
        $('#scrumBoard').dataTable();

        $('#sprintsList').on('change',
            function () {
                location.href = '/sprint/index/' + $(this).val();
            });

        $('.task-buttons-board').on('click', 'button', function() {
            var taskType = $(this).attr('data-type-id');
            var taskBox = $(this).parents('.js-taskbox');
            var scrumTaskId = taskBox.attr('data-task-id');

            if (taskType === '@((byte)@TaskType.Done)') {
                bootbox.prompt({
                    title: "How much took this task?",
                    inputType: 'select',
                    inputOptions: [

                    @foreach (var estimation in Model.Estimations)
                    {
                        @:{
                        @:    text: @estimation.Value,
                        @:    value: @estimation.Id
                        @:},
                    }
                    ],

                    callback: function(took) {
                        if (took == null)
                            return;
                        else
                            updateScrumTask(taskBox, scrumTaskId, taskType, took);
                    }
                });
            } else
                updateScrumTask(taskBox, scrumTaskId, taskType);


        });

        function updateScrumTask(taskBox, scrumTaskId, taskType, took) {
            $.ajax({
                url: '/api/scrumtasks/' + scrumTaskId,
                method: 'patch',
                data: { taskType: taskType, tookId: took }
            })
            .done(function(data) {
                switch(taskType) {
                case '@((byte)TaskType.Awaiting)':
                    moveTaskBox(taskBox, '@TaskType.Awaiting');
                    break;
                case '@((byte)TaskType.Done)':
                    moveTaskBox(taskBox, '@TaskType.Done');
                    break;
                case '@((byte)TaskType.Ongoing)':
                    moveTaskBox(taskBox, '@TaskType.Ongoing');
                    break;
                }
            })
            .fail(function() {
                toastr.error('Something went wrong!');
            });
        }

        function moveTaskBox(taskBox, destination) {
            taskBox.fadeOut(400, function () {

                (destination == '@TaskType.Done')
                    ? $(this).find('.js-done').show()
                    : $(this).find('.js-done').hide();

                $(this)
                    .appendTo($(this).parents('tr.js-user-row').find('.js-' + destination))
                    .fadeIn(400);
            });
        }
    </script>
}